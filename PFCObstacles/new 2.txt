    """
        #inString = '''554632N 0140547E - 554609N 0140954E -
        #554514N 0140819E - 554319N 0140919E -
        #554325N 0141146E - 554204N 0140717E -
        #554507N 0140358E - 554632N 0140547E'''
        inString = self.dlg.textEditLateral.toPlainText()
        inList = inString.split('-')
        noOfCoords = len(inList)

        coordinateArrayDMS = [None] * noOfCoords
        for i in range(noOfCoords):
            coordinateArrayDMS[i] = [None] * 2

        for i in range(noOfCoords):
            coordinateArrayDMS[i] = inList[i].split()

        coordinateArrayDD = [None] * noOfCoords
        for i in range(noOfCoords):
            coordinateArrayDD[i] = [None] * 2

        for i in range(noOfCoords):
            if coordinateArrayDMS[i][0].endswith('N'):
                #Nordkoordinat hittad
                lengthOfCoord = len(coordinateArrayDMS[i][0])
                maxSliceIndex = lengthOfCoord -1
                DD = coordinateArrayDMS[i][0][0:2]
                MM = coordinateArrayDMS[i][0][2:4]
                SS = coordinateArrayDMS[i][0][4:maxSliceIndex]
                dFloat = float(DD)
                mFloat = float(MM)
                sFloat = float(SS)
        
                #Konvertera till decimalgrader
                decimalDegrees = dFloat + (mFloat / 60) + (sFloat / 3600)
                coordinateArrayDD[i][0] = decimalDegrees
        #        print coordinateArrayDD[i][0]
        
            elif coordinateArrayDMS[i][0].endswith('S'):
                #Sydkoordinat hittad
                lengthOfCoord = len(coordinateArrayDMS[i][0])
                maxSliceIndex = lengthOfCoord -1
                DD = coordinateArrayDMS[i][0][0:2]
                MM = coordinateArrayDMS[i][0][2:4]
                SS = coordinateArrayDMS[i][0][4:maxSliceIndex]
                dFloat = float(DD)
                mFloat = float(MM)
                sFloat = float(SS)
        
                #Konvertera till decimalgrader
                decimalDegrees = -(dFloat + (mFloat / 60) + (sFloat / 3600))
                coordinateArrayDD[i][0] = decimalDegrees
        #        print coordinateArrayDD[i][0]

        for i in range(noOfCoords):
            if coordinateArrayDMS[i][1].endswith('E'):
                #Ostkoordinat hittad
                lengthOfCoord = len(coordinateArrayDMS[i][1])
                maxSliceIndex = lengthOfCoord -1
                DD = coordinateArrayDMS[i][1][0:3]
                MM = coordinateArrayDMS[i][1][3:5]
                SS = coordinateArrayDMS[i][1][5:maxSliceIndex]
                dFloat = float(DD)
                mFloat = float(MM)
                sFloat = float(SS)
        
                #Konvertera till decimalgrader
                decimalDegrees = dFloat + (mFloat / 60) + (sFloat / 3600)
                coordinateArrayDD[i][1] = decimalDegrees
        #        print coordinateArrayDD[i][1]
        
            elif coordinateArrayDMS[i][1].endswith('W'):
                #Vaestkoordinat hittad
                lengthOfCoord = len(coordinateArrayDMS[i][1])
                maxSliceIndex = lengthOfCoord -1
                DD = coordinateArrayDMS[i][1][0:3]
                MM = coordinateArrayDMS[i][1][3:5]
                SS = coordinateArrayDMS[i][1][5:maxSliceIndex]
                dFloat = float(DD)
                mFloat = float(MM)
                sFloat = float(SS)
        
                #Konvertera till decimalgrader
                decimalDegrees = -(dFloat + (mFloat / 60) + (sFloat / 3600))
                coordinateArrayDD[i][1] = decimalDegrees
        #        print coordinateArrayDD[i][1]


        #print coordinateArrayDMS
        #print coordinateArrayDD

        #Skriv till aktivt lager
        #layer = iface.activeLayer()
        
        #Hämta Luftrumstyp
        airspaceType = self.dlg.comboBoxObstacles.currentText()
        
        #Hämta Luftrumsklass
        airspaceClass = self.dlg.comboBoxClass.currentText()
        
        #Hämta valt lager
        layers = self.iface.legendInterface().layers()
        selectedLayerIndex = self.dlg.comboBoxLayer.currentIndex()
        selectedLayer = layers[selectedLayerIndex]
 
        iter = selectedLayer.getFeatures()
        highestID = 0

        for feature in iter:
            # retrieve every feature with its geometry and attributes
            # fetch geometry
            geom = feature.geometry()
            #print "Feature ID %d: " % feature.id()

            # show some information about the feature
            if geom.type() == QGis.Polygon:
                x = geom.asPolygon()
#                numPts = 0
#                for ring in x:
#                    numPts += len(ring)
#                print "Polygon: %d rings with %d points" % (len(x), numPts)
            else:
                print "Unknown"

            # fetch attributes
            attrs = feature.attributes()

            # attrs is a list. It contains all the attribute values of this feature
            #print attrs
            currentID = attrs[0]
            if currentID >= highestID:
                highestID = currentID
            #print highestID
            
        caps = selectedLayer.dataProvider().capabilities()
        #caps_string = selectedLayer.dataProvider().capabilitiesString()
        #print caps_string

        if caps & QgsVectorDataProvider.AddFeatures:
            feat = QgsFeature(selectedLayer.pendingFields())
            highestID += 1
            feat.setAttribute('id',str(highestID))
            #print highestID
            feat.setAttribute('Category',airspaceType)
            feat.setAttribute('Class',airspaceClass)
            feat.setAttribute('Name',self.dlg.lineEditName.text())
            feat.setAttribute('Callsign',self.dlg.lineEditCallsign.text())
            feat.setAttribute('Freq',self.dlg.lineEditFreq.text())
            feat.setAttribute('ATCUnit',self.dlg.lineEditATC.text())
            feat.setAttribute('Remarks',self.dlg.textEditRemarks.toPlainText())
            feat.setAttribute('Upper',self.dlg.lineEditUpper.text())
            feat.setAttribute('Lower',self.dlg.lineEditLower.text())
            feat.setAttribute('Visible',"1")
            feat.setAttribute('LabelVis',"1")
            points = [None] * noOfCoords
            for i in range(noOfCoords):
                #Använder LatLon i array, men QGIS använder LonLat...
                points[i] = QgsPoint(coordinateArrayDD[i][1],coordinateArrayDD[i][0])
                #print points[i]
            feat.setGeometry(QgsGeometry.fromPolygon([points]))
            (res, outFeats) = selectedLayer.dataProvider().addFeatures([feat])
            #self.iface.mapCanvas().refresh()
        """